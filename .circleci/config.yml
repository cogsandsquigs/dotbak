# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

executors:
    linux:
        docker:
            - image: rust:latest # `latest` instead of `slim` because we need OpenSSL bindnigs.

        environment:
            CARGO_TERM_COLOR: always
            CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

    mac:
        macos:
            xcode: 14.3.1

        environment:
            CARGO_TERM_COLOR: always
            CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
    test-linux:
        executor: linux

        # # Add steps to the job
        # # See: https://circleci.com/docs/2.0/configuration-reference/#steps
        # parallelism: 4

        steps:
            # Checkout the code from GitHub
            - checkout

            # Restore cached dependencies
            - restore_cache:
                  key: dotbak-build-cache-branch-{{ .Branch }}-arch-{{ arch }}-lockfile-{{ checksum "Cargo.lock" }}

            # Configure git user.name and user.email so tests can run git commands properly
            - run:
                  name: "Configure git to work with tests"
                  command: |
                      git config --global user.name "Dotbak Testing"
                      git config --global user.email "dotbak_testing@circleci.test.dotbak"

            # Test the code
            - run:
                  name: "Test dotbak"
                  # TODO: parallelize tests
                  command: |
                      cargo test

            # Save buildfiles and dependencies to cache
            - save_cache:
                  key: dotbak-build-cache-branch-{{ .Branch }}-arch-{{ arch }}-lockfile-{{ checksum "Cargo.lock" }}
                  paths:
                      - target

    cargo-publish:
        executor: linux

        steps:
            - checkout

              # Restore cached dependencies
            - restore_cache:
                  key: dotbak-build-cache-branch-{{ .Branch }}-arch-{{ arch }}-lockfile-{{ checksum "Cargo.lock" }}

            # Test the code
            - run:
                  name: "Cargo publish"
                  # TODO: parallelize tests
                  command: |
                      cargo publish --token $CARGO_PUBLISH_TOKEN

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
    # Test the code on Linux
    test:
        jobs:
            - test-linux

    # Publish to crates.io on tags
    publish:
        # Note: filters act like an OR, not an AND
        filters:
            tags:
                only:
                    - /^v.*/
            branches:
                ignore: /.*/

        jobs:
            - test-linux
            - cargo-publish:
                  requires:
                      - test-linux
